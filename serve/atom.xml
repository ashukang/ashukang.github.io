<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>一杯清茶，一本书</title>
 <link href="http://ashukang.github.io/" rel="self"/>
 <link href="http://ashukang.github.io"/>
 <updated>2014-12-14T19:36:16+08:00</updated>
 <id>http://ashukang.github.io</id>
 <author>
   <name>ashukang</name>
   <email>kangsj9104@gmail.com</email>
 </author>

 
 <entry>
   <title>Android声控Cubieboard播放音乐（服务器）</title>
   <link href="http://ashukang.github.io/smart/2014/11/30/voice-controller-server"/>
   <updated>2014-11-30T00:00:00+08:00</updated>
   <id>http://ashukang.github.io/smart/2014/11/30/voice-controller-server</id>
   <content type="html">
&lt;p&gt;在Cubieboard上面通过Python开启Socket监听，接受来自Android平台的请求。当Socket连接接通之后，根据协定好的协议，处理Android客户端发起的命令。这里使用了Mplayer来播放音乐，通过Mplayer的slave模式，可以轻松地控制音乐的播放过程，同时引入了python的subprocess模块，用于多进程编程。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;项目源代码 &lt;a href=&quot;https://github.com/ashukang/ARobot/tree/master/V1.0/Server_Python&quot;&gt; github &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pythonsocket&quot;&gt;Python的Socket编程&lt;/h2&gt;

&lt;p&gt;在Android平台上，通过Android SDK可以非常方便的创建Socket请求，现在需要先在Cubieboard上建立Socket监听才可以响应Android端的请求。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Python对Socket编程的封装也是非常的成熟，首先使用socket模块创建一个socket对象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;调用bind方法，将刚创建的socket对象绑定到对应的IP地址与端口上，再通过listen方法限定最大的接受请求数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;准备就绪后可以调用accept方法，阻塞地等待客户端的请求，如果有客户端请求，则会返回一个connection对象。通过调用connection的send和recv方法，可以实现与客户端的通信。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后调用close方法，将资源释放掉。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;下面的代码简单地示例了Python的Socket编程：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;import socket

if __name__ == &quot;__main__&quot;:

	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.bind(('192.168.4.10', 7556))
	sock.listen(1)
	while True:
		try:
			print 'do accept socket'
			connection,address = sock.accept()
			print 'client ip is ',address
			connection.settimeout(120)
			while True:
				try:
					buf = connection.recv(1024)
					print 'get cmd:',buf
				except Exception, ex:
					print 'recv error:',ex
					try:
						connection.close()
					except Exception,ex:
						print 'try close connection error:',ex 
					break
		except Exception,ex:
			print 'accept error:',ex
			break
	sock.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section&quot;&gt;通信协议&lt;/h2&gt;

&lt;p&gt;Cubieboard在接收到Android口令时，需要识别出来具体的操作，所以需要同客户端执行同一个协议，这就涉及到了通信协议的设定。通常的通信协议都由一个定长字节数的包头加可变长的包体组成，包头包含协议的版本号、口令号、包体大小、校验信息等。&lt;/p&gt;

&lt;p&gt;不过作为一个偏实验性质的局域网应用，可以使用较为直观的字符串和普通的分隔符来表示或者间隔数据类型。本文所实现的功能是播放音乐，大概有的操作是play、pause、stop、next等，但是这里旨在搭建一个通用的控制模块，假如以后拓展了控制视频播放的功能，那么单纯的play、pause、stop、next就无法满足要求，因此还需要引入一个操作类别，在一个大的范围内限定操作的对象。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里可以使用“\n”来表示一条口令的结束，以“_”来分隔一个口令内类型、操作与具体数据。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;类型_操作_数据
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;视相关操作，决定是否有数据，有些操作并不需要携带相关数据，比如pause，则数据项为空即可。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cubieboard&quot;&gt;工厂模式搭建Cubieboard响应框架&lt;/h2&gt;

&lt;p&gt;设计模式是在面向对象编程的过程中实践总结出来的编码范式，它能帮助我们更加优雅地解决问题或者拓展模块。以上诉协议框架为例，当识别到具体的类型时，接下来的工作就是将操作指令以及相关数据交与对应的模块去执行，非常直观地编码这一个过程，可能是使用if else，或者是switch。当类型的数量少的时候，这段派发操作的代码还是可阅读的，但是当类型模块越来越大时，这里的代码长度将会变得越来越大，而且都是些重复性质的代码，显得不优雅。这个时候就可以使用简单工厂模式来解决这个问题，把所有的类型模块用它对应的类型做KEY，存放在一个Map中，当识别到操作类型时，只需要在这个Map中检索对应的类型模块即可，这样在派发类型操作的模块不需要在新增类型模块时被修改，而且整体的设计也是层次鲜明。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;对于如何使用Python来实现设计模式的问题，可以参看这里&lt;a href=&quot;http://www.cnblogs.com/wuyuegb2312/archive/2013/04/09/3008320.html&quot;&gt; 这里 &lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;首先我们需要抽象出来各种操作的统一接口，明显地这个接口需要2种参数，一个操作口令，一个是相关数据。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里将口令和数据合并为一个参数，让具体的操作决定是否需要分割为操作口令和相关数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;class CmdHandler:
        def handle(self, cmd):
   	        	pass
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;根据具体的操作类型，继承这个接口，并实现相应的功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里为例是实现了MusicHandler应对播放音乐的请求，同时实现了UndefHandler，当发现有除播放音乐外的其他类型时，就可以统一使用这个类型模块，里面只是简单提示这是一个无法识别的操作类型。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;class MusicHandler(CmdHandler):

    	def handle(self, cmd):
            	if &quot;play&quot; == cmd:
                    	self.play()
            	elif &quot;stop&quot; == cmd:
                    	self.stop()
            	elif &quot;next&quot; == cmd:
                    	self.next()
            	elif &quot;pause&quot; == cmd:
                    	self.pause()

	def play(self):
		pass

	def stop(self):
		pass

	def next(self):
		pass

	def pause(self):
		pass


class UndefHandler(CmdHandler):

    	def handle(self, cmd):
            	print &quot;undefine cmd &quot;, cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;当所有类型模块都添加完成后，还需要一个工厂类来管理这些模块。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;从设计模式的角度上说，派发操作类型的代码模块（Socket部分）是不需要知道有哪些操作类型的，它只需要通过从Android客户端拿到的类型作为KEY，向工厂查询，然后工厂返回操作的接口，派发模块再将具体操作口令、数据输入到这个操作接口即可，根据面向对象的多态性，只要工厂返回的是正确的类型操作模块，则可以认为Android客户端所请求的操作被正确地执行了。这样在就实现了派发模块与业务模块的分离。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;class HandlerFactory:

    	handlers = {}
    	handlers[&quot;music&quot;] = MusicHandler()

    	def createHandler(self, type):
            	if type in self.handlers:
                    	handler = self.handlers[type]
            	else:
                    	handler = UndefHandler()
            	return handler
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mplayer&quot;&gt;Mplayer的应用&lt;/h2&gt;

&lt;p&gt;Mplayer是一款强大的播放器软件，能够解码多种格式的音视频。在命令行下使用Mplayer也是非常的简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mplayer [options] [url|path/]filename
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mplayer支持播放音乐列表，只需要把音乐路径（相对、绝对）写在一个列表中，以换行分隔即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;mplayer -playlist music.list
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;在命令行下执行Mplayer播放音乐，还可以通过键盘控制它&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Basic keys: (complete list in the man page, also check input.conf)
 &amp;lt;-  or  -&amp;gt;       seek backward/forward 10 seconds
 down or up       seek backward/forward  1 minute
 pgdown or pgup   seek backward/forward 10 minutes
 &amp;lt; or &amp;gt;           step backward/forward in playlist
 p or SPACE       pause movie (press any key to continue)
 q or ESC         stop playing and quit program
 + or -           adjust audio delay by +/- 0.1 second
 o                cycle OSD mode:  none / seekbar / seekbar + timer
 * or /           increase or decrease PCM volume
 x or z           adjust subtitle delay by +/- 0.1 second
 r or t           adjust subtitle position up/down, also see -vf expand
 double click     toggle fullscreen
 right click      pause (press again to continue)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述简单的操作模式，比较适合在命令行下试听的情况，因为想要在其他程序中控制Mplayer，可以使用Mplayer提供的另外一种执行模式，既slave模式，在这种模式下，Mplayer默认在后台运行，它通过接收标准输入的命令来控制播放，每个命令都是以“\n”结尾。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可以通过下述命令查看Mplayer在slave模式下支持的命令：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;mplayer -input cmdlist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用Mplayer的slave模式，可以方便的让我们操控它，只需要找到一种创建进程的方式，创建一个运行Mplayer的子进程，就可以通过这个子进程与Mplayer交互，从而实现控制音乐播放的功能，下一个小结将介绍如何在Python中创建一个子进程。&lt;/p&gt;

&lt;h2 id=&quot;python-subprocess&quot;&gt;Python subprocess的应用&lt;/h2&gt;

&lt;p&gt;subprocess的目的就是启动一个新的进程并且与之通信。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;subprocess模块中定义了Popen类。可以使用Popen来创建进程，并与进程进行复杂的交互。构造函数如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;subprocess.Popen(args, 
	bufsize = 0, 
	executable = None, 
	stdin = None, 
	stdout = None, 
	stderr = None, 
	preexec_fn = None, 
	close_fds = False, 
	shell = False, 
	cwd = None, 
	env = None, 
	universal_newlines = False, 
	startupinfo = None, 
	creationflags=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;stdin, stdout, stderr分别表示程序的标准输入、输出、错误句柄。他们可以是PIPE，文件描述符或文件对象，也可以设置为None，从父进程继承。更加详细的描述可以参考&lt;a href=&quot;http://blog.csdn.net/imzoer/article/details/8678029&quot;&gt; 这里 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;利用subprocess模块，可以创建一个运行Mplayer的进程，并且建立通信管道，在这个通信管道里面传输控制命令给Mplayer，从而实现了在Cubieboard上面控制音乐播放的目的。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Android声控CubieBoard播放音乐（客户端）</title>
   <link href="http://ashukang.github.io/smart/2014/11/30/voice-controller-client"/>
   <updated>2014-11-30T00:00:00+08:00</updated>
   <id>http://ashukang.github.io/smart/2014/11/30/voice-controller-client</id>
   <content type="html">
&lt;p&gt;CubieBoard是一块优秀的开发板，小巧节能，能运行Linux系统，一般拿它来做BT下载机，或者小型的服务器，搭载如git、samba等服务。平常都是外接显示器，键鼠操作它，或者直接SSH远程登录。考虑到家里现在都会有的局域网，以及手头开放性强的Android智能手机，可以做一个交互界面更加友好的简单操控器，本文还借助了PocketSphinx库，利用它强大的离线语音识别能力，实现声控的功能，并且以播放音乐为例，讲述整个声控框架所涉及到的主要地方。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;项目源代码&lt;a href=&quot;https://github.com/ashukang/ARobot/tree/master/V1.0/Client_Android&quot;&gt; github &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;示例视频&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;&lt;embed src=&quot;http://player.youku.com/player.php/sid/XODQ3ODU3OTAw/v.swf&quot; allowfullscreen=&quot;true&quot; quality=&quot;high&quot; width=&quot;480&quot; height=&quot;400&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;pocketsphinx&quot;&gt;使用PocketSphinx实现离线语音识别&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;下载&lt;a href=&quot;http://sourceforge.net/projects/cmusphinx/files/pocketsphinx/5prealpha/&quot;&gt; PocketSphinx Android Demo &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里我下载的是PocketSphinx Android Demo的Eclipse项目版本，如果你使用的是Google提供的最新版本ADT Bundle IDE，那可能需要先解决下ant缺失的问题，因为PocketSphinx Android Demo里面有一个ant builder，用来处理语音素材。如果是使用原生Eclipse IDE + ADT Plugin则可以直接导入这个Demo。直接运行这个Demo，根据界面上面的提示，读出指定的英文则可以进行下一步，我测试了下，渣渣的口音都可以识别出来，真心点赞！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;尝试修改配置，新增识别项&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个官方的Demo只包含了英文的字典，所以识别的都是英文单词，因为我想要实现的控制器，多以命令的模式表示，所以可以把控制命令简化为如play pause next等简单的口令，就没有选择寻找中文字典，如果想更加接地气，很明显中文语音识别是必须，&lt;a href=&quot;http://blog.csdn.net/zouxy09/article/details/7941585&quot;&gt; 这里 &lt;/a&gt;有大神小结了相关的知识点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Demo中采用来AsyncTask的方式来加载数据，可以推测这里的IO操作应该非常的繁重，果不其然，所有的与语音识别相关的数据，包括字典、目标词汇等都在Assert文件夹中，数量不少而且个别文件的大小还不小。在加载文件的方法中，可以看出来Demo展示来3种注册目标词汇的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i3.tietuku.com/add48a70171d3d4c.png&quot; alpngt=&quot;setup recognizer&quot; /&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一种方式是注册单个单词或者短语，甚至是一个句子。如Demo的第一个页面所示，想要触发到这里的识别，需要读准整个短语。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二种方式是注册一个词组，如Demo的第二个页面所示，触发这里的识别，只要读准某一个词就可以了。找到Assert文件夹中对应的词组描述文件：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i3.tietuku.com/1ca46cca9745fea6.png&quot; alpngt=&quot;digits gram&quot; /&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个词组描述文件有一定的文件格式，可以猜测到gammer后面对应的digits是整个词组文件的KEY，用于注册到PocketSphinx服务中，下面的digit是目标词汇，以竖线分隔，最后以分号表示结束。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第三种是带语义的识别？？没有验证到，只看到load到内存中的文件可能是一个类db的文件，所以推测是功能更加强大的语义识别，后续如果需要应用到更加智能的AI，或许需要对这里有所学习。目前看来，仅使用第一、第二种识别方式也是可以的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;尝试修改digits文件，在目标词汇中添加如“play”、“pause”、“next”等单词，再次运行Demo，发现确实可以识别到我们新添加的目标词汇，故可以以这种方式添加或者修改目标词汇来满足我们的需求。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;学习PocketSphinx的API&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;回调API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i3.tietuku.com/0318809b53dc1855.png&quot; alpngt=&quot;callback api&quot; /&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;onBeginningOfSpeech 是在PocketSphinx开始录音的时候会回调，在这里我们可以在UI上有所展示，比如显示“正在录音”的tips。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;onEndOfSpeech 是在PocketSphinx结束录音的时候会回调，这与onBeginningOfSpeech是成对出现的，这里可以将“正在录音”的tips去掉，或者展示“正在识别”的tips。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;onPartialResult 当识别到目标词汇时，PocketSphinx会回调这个接口，并且返回值非空，一定是目标词语，或者是目标词组中的某个。这里可以根据场景判断是发送口令到CubieBoard服务器，还是执行本定操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;onResult 在测试中发现，仅使用上诉第一、第二种方式时，可以忽略这个接口。从Demo上看这个接口会返回空值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注册与反注册回调&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;SpeechRecognizer::addListener(RecognitionListener listener);
SpeechRecognizer::removeListener(RecognitionListener listener);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;开始监听与结束监听，这里这里传给PocketSphinx的是目标词汇的KEY，而不是目标词汇本身。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;SpeechRecognizer::startListening(String key);
SpeechRecognizer::stop();
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;自此，如何在Android上使用PocketSphinx来识别英文词汇，已经变得非常的明朗，把它整合起来就变成来这个离线语音控制器的一个核心部分。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;socketcubieboard&quot;&gt;使用Socket将识别到的口令发送到Cubieboard服务器上&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Android上对Socket的封装还是非常的简便，这里做以个简单的示例，考虑到是局域网，以及口令的发送可能不会出现特别多，特别频繁的场景，所以每次发送完口令时，都将Socket关闭，当然这里可以根据具体的使用场景再做优化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i3.tietuku.com/921c5a35241548e9.png&quot; alpngt=&quot;Android Socket&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;ui&quot;&gt;UI整合&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里考虑使用的便利性，在唤醒控制器的场景使用的即时监听语音的方式，如Demo本身所展示的方式。但是在音乐播放控制页面，在采用了“按住说话”的方式监听的方式，是因为可能此时有音乐在播放，对语音识别有一定的干扰，所以加了个“按住”操作，同时支持正常的按钮操作。运行截图如下，具体代码实现在&lt;a href=&quot;https://github.com/ashukang/ARobot/tree/master/V1.0/Client_Android&quot;&gt; 这里 &lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;启动界面，等待唤醒。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i3.tietuku.com/65db0128e5752134.png&quot; alpngt=&quot;UI_1&quot; width=&quot;300&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;唤醒后，等待识别具体的操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i3.tietuku.com/40513b7bb4654ff3.png&quot; alpngt=&quot;UI_2&quot; width=&quot;300&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;进入音乐播放控制界面。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i3.tietuku.com/31814ef89d477173.png&quot; alpngt=&quot;UI_3&quot; width=&quot;300&quot; /&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Arduino+超声波测距做控制器</title>
   <link href="http://ashukang.github.io/smart/2014/11/15/arduino"/>
   <updated>2014-11-15T00:00:00+08:00</updated>
   <id>http://ashukang.github.io/smart/2014/11/15/arduino</id>
   <content type="html">
&lt;p&gt;Arduino是非常容易上手的电子积木，一个小巧的控制核心再加上一些功能拓展模块，就可以做出一个个有趣的玩意儿。今天想分享的是超声波距离传感器的应用，利用超声波距离传感器可以测量出障碍物的距离，利用这一个特性，我们可以通过距离差来识别拍手的手势，从而做到识别拍手这个动作，让这个组合实现一个控制器的功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;项目的源代码&lt;a href=&quot;https://github.com/ashukang/arduino-demo/tree/master/HC_SR04_2&quot;&gt; github &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;示例视频&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;&lt;embed src=&quot;http://player.youku.com/player.php/sid/XODI3MzY2MzU2/v.swf&quot; allowfullscreen=&quot;true&quot; quality=&quot;high&quot; width=&quot;480&quot; height=&quot;400&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;实验器材&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Arduino nano + 拓展板&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.tietuku.com/61a359d85efab6d2.jpg&quot; alpngt=&quot;Arduino nano&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;HC-SR04 超声波传感器&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.tietuku.com/97fad545c014e502.jpg&quot; alpngt=&quot;HC-SR04&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;面包板 + 杜邦线&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.tietuku.com/33cee384cdc39e28.jpg&quot; alpngt=&quot;面包板&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;实现超声波测距&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;下载 &lt;a href=&quot;http://code.google.com/p/arduino-new-ping&quot;&gt; NewPing &lt;/a&gt; 库，并安装到 Arduino 的插件中。&lt;/li&gt;
  &lt;li&gt;新建 Arduino 项目。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;写入示例代码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;NewPing.h&amp;gt;

#define TRIGGER_PIN  	2
#define ECHO_PIN     	3
#define MAX_DISTANCE 	200
#define DELAY_TIME 	50

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);

int uS;
int curCM;

void setup() {
  		Serial.begin(115200);
	curCM = 0;
  		uS = 0;
}

void loop() {
  		delay(DELAY_TIME);
  		uS = sonar.ping();
  		curCM = uS / US_ROUNDTRIP_CM;
		Serial.print(&quot;Ping: &quot;);
		Serial.print(curCM);
		Serial.println(&quot; cm&quot;);
  	}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;将 Arduino nano 和 HC-SR04 超声波传感器相连。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;VCC接5v，GND相接，根据示例代码的配置，将Trig接D2，将Echo接D3，实际上Trig与Echo不一定都要接到D2、D3处，只要和代码写定的阵脚对应即可。为了方便操作我使用面包板来连接，并找来个简单的支架固定面包板，确保超声波传感器的正面朝上，这样更加方便测试。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.tietuku.com/a4ba73586f2c103b.jpg&quot; alpngt=&quot;连线&quot; /&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;将 Arduino nano 接到 PC，然后将示例代码编译上传到 Arduino nano 板上，就可以看到有实际的距离打印出来了，可以将手掌盖着超声波传感器上方，并改变上下的位置，观察距离测量值的变化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;实现拍手识别&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;找到拍手引起距离变化的规律&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;以正常的拍手动作，在超声波传感器上方以一定的频率执行，这样更加容易找到想要的判断条件。为了更好的处理数据，可以修改下 loop() 方法，输出纯数据的原始值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;void loop() {
  		delay(DELAY_TIME);
  		uS = sonar.ping();
  		curCM = uS / US_ROUNDTRIP_CM;
		Serial.println(curCM);
  	}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;操作10次后，将原始数据拷贝到 Excel 中，然后做成一个图表，图表能帮助我们快速地在一堆数据中找到规律。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.tietuku.com/d0819f005dfca53c.png&quot; alpngt=&quot;拟合&quot; /&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;适当调整显示比例以及刻度值，可以发现有很多明显的波谷，很显然这些波谷对应的时刻，正是拍手时手掌处于最低处的时刻，观察到红色箭头的位置，基本上所有波谷开始的时候都是会穿过这条线，因此可以得到一个粗略的判断条件，就是如果两次距离测量值的连线是穿过10cm的，则认为执行了一次拍手操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;include &amp;lt;NewPing.h&amp;gt;

#define TRIGGER_PIN  		2
#define ECHO_PIN     		3
#define MAX_DISTANCE 		200
#define DELAY_TIME 		50
#define THRESHOLD_DISTANCE 	10

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);

int uS;
int curCM;
int lastCM;
int hitCount;

void setup() {
  		Serial.begin(115200);
  		// init
  		curCM = 0;
  		lastCM = 0;
	hitCount = 0;
  		uS = 0;
}

void loop() {
  		delay(DELAY_TIME);
  		uS = sonar.ping();
  		curCM = uS / US_ROUNDTRIP_CM;
  		if (lastCM &amp;gt; THRESHOLD_DISTANCE  
			&amp;amp;&amp;amp; curCM &amp;gt; 0 &amp;amp;&amp;amp; curCM &amp;lt;= THRESHOLD_DISTANCE) {
			hitCount++;
			Serial.print(&quot;Ping: &quot;);
			Serial.print(curCM);
			Serial.print(&quot; cm, hit &quot;);
			Serial.println(hitCount);
  		}
  		Serial.println(curCM);
  		lastCM = curCM;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;重新编译上传控制程序，可以发现确实能识别拍手的手势，但是却存在一个问题，就是能看到明显地发现在一个拍手的过程中出现了两次触发动作。因为我们很难保证每次拍手时都能落在有效的区域内，同时每次拍手的频率固定。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i2.tietuku.com/737cef381dc47f74.png&quot; alpngt=&quot;拟合&quot; /&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;所以这种单一的判断条件不能很好的满足要求，我们假设以正常的速度拍手，既不会出现特别高的频率，那么就可以限定一个有效的时间阈值，在这个时间阈值内如果出现多次的拍手识别，就当作是误判，只算一次。这里假定这个时间阈值为200ms。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;include &amp;lt;NewPing.h&amp;gt;

#define TRIGGER_PIN  		2
#define ECHO_PIN     		3
#define MAX_DISTANCE 		200
#define DELAY_TIME 		50
#define THRESHOLD_DISTANCE 	10
#define VALID_TIME_INTERVAL 	200/DELAY_TIME

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);

int uS;
int curCM;
int lastCM;
int hitCount;
int lastHitStamp;

void setup() {
  		Serial.begin(115200);
  		// init
  		curCM = 0;
  		lastCM = 0;
  		hitCount = 0;
  		lastHitStamp = 0;
  		uS = 0;
}

void loop() {
  		delay(DELAY_TIME);
  		lastHitStamp++;
  		uS = sonar.ping();
  		curCM = uS / US_ROUNDTRIP_CM;
  		if (lastCM &amp;gt; THRESHOLD_DISTANCE  
			&amp;amp;&amp;amp; curCM &amp;gt; 0 &amp;amp;&amp;amp; curCM &amp;lt;= THRESHOLD_DISTANCE 
			&amp;amp;&amp;amp; lastHitStamp &amp;gt;= VALID_TIME_INTERVAL) { 

			hitCount++;
			lastHitStamp = 0;
			Serial.print(&quot;Ping: &quot;);
			Serial.print(curCM);
			Serial.print(&quot; cm, hit &quot;);
			Serial.println(hitCount);
  		}
  		Serial.println(curCM);
  		lastCM = curCM;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在已经没有出现误报的情况了，但是还有一个问题，如果现在将手掌处于10cm处，既处于位置阈值的地发，那么稍稍地上下移动也是会被识别为拍手，这个与我们的预期有点出入，我们希望能有一个上下挥动的动作，出现这个问题的根源是因为我们的这个判断条件太过简单了，并没有考虑到两个测量位置之间的斜率，很明显需要有一个较大的倾斜斜率才能体现出上下挥动的动作。假定两个测量位置之间的时间差是单位时间，既两个测量位置之间的斜率可以转换为两个测量位置之间的差值。假定两个测量位置之间的差值必须大于2cm。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;#define VALID_DISTANCE 2

void loop() {
  		delay(DELAY_TIME);
  		lastHitStamp++;
  		uS = sonar.ping();
  		curCM = uS / US_ROUNDTRIP_CM;
  		if (lastCM &amp;gt; THRESHOLD_DISTANCE  
			&amp;amp;&amp;amp; curCM &amp;gt; 0 &amp;amp;&amp;amp; curCM &amp;lt;= THRESHOLD_DISTANCE 
			&amp;amp;&amp;amp; lastHitStamp &amp;gt;= VALID_TIME_INTERVAL
			&amp;amp;&amp;amp; (lastCM - curCM) &amp;gt;= VALID_DISTANCE) {

			hitCount++;
			lastHitStamp = 0;
			Serial.print(&quot;Ping: &quot;);
			Serial.print(curCM);
			Serial.print(&quot; cm, hit &quot;);
			Serial.println(hitCount);
  		}
  		Serial.println(curCM);
  		lastCM = curCM;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在的判断条件基本满足要求，但是再加快一下拍手的速度，会发现有些动作是会被漏识别的。为什么会出现这种情况呢？回看我们一开始模拟出来的测量位置连线图，实际上我们得到的只是一些点，既位置，而那些连线是我们为了方便判断，虚拟出来的，用离散的数值来模拟连续的过程，是计算机中惯用的伎俩。很明显，如果连续过程变化得很快，但是离散化采样的时间间隔又非常的长，那么势必会丢掉部分的信息，将一些细节丢失了。就目前我们使用的实验器材来看，离散化的处理方式我们是无法更改的，但是采样率是可以调整，可以通过提高采样率来保留更多的信息，很明显的是这个采样率的提高幅度不会是无限的，否则这个过程又会被抽象成来一个连续的。所以在使用这个控制器时，也是需要人为的限定下拍手时上下挥动的速度，以保证是在此控制器的量程范围内。将采样率提高为原来的两倍，基本满足稍快手速的要求。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;#define DELAY_TIME 25
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;到此，就实现了一个利用 Arduino nano 和超声波传感器来识别上下挥手动作的控制器，每当上下挥动一次手掌时，会发出一个识别的事件。当然这只是一个非常基础的模型，其识别条件也不是最完美的，但是相信我们已经为下一步好好利用它打下了基础，或许能做出来更加有趣的东西。&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>从小需求开始学Chrome插件开发</title>
   <link href="http://ashukang.github.io/other/2014/06/25/chrome"/>
   <updated>2014-06-25T00:00:00+08:00</updated>
   <id>http://ashukang.github.io/other/2014/06/25/chrome</id>
   <content type="html">
&lt;p&gt;浏览网页还算是比较舒心的事情，但我就遇到了一件比较尴尬的事情。都说人有三急，本人就是在浏览谋篇长博文时，突然想蹲坑（=。=），于是想着如果这个时候能在手机上快速打开这个网页，那么就能解决说因为上洗手间而暂时放弃阅读的问题。脑海里一闪而过的念头就是将网页链接生成为一张二维码，然后手机上一扫不就可以做到快速跨设备复制了吗？本来这种简单的需求肯定Chrome应用市场上会有大把，但是本着一颗好奇的心，还是学学该怎么做一个Chrome插件。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;项目的源代码&lt;a href=&quot;https://github.com/ashukang/chrome_plugin_url_qrcode&quot;&gt; github &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;项目打包后的&lt;a href=&quot;https://chrome.google.com/webstore/detail/url-qrcode/oaigjaelpcceejpejjancanmjahagikm&quot;&gt; Chrome 插件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;js-&quot;&gt;用 JS 来生成二维码图片&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;查找&lt;a href=&quot;http://hi.baidu.com/277280289/item/a2ca9e989806c4de1a49dfe3&quot;&gt;资料&lt;/a&gt;，使用一个开源的第三方库 &lt;a href=&quot;https://github.com/jeromeetienne/jquery-qrcode&quot;&gt;jquery-qrcode&lt;/a&gt;，可以方便的生成二维码。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;以下代码是参照原作者的代码，并且做了点视觉上的小调整。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;JS生成二维码&amp;lt;/title&amp;gt;
&amp;lt;script src=&quot;http://code.jquery.com/jquery-1.10.1.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;jquery.qrcode.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div id=&quot;output&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
jQuery(function(){
	$('#output').qrcode({
		width: 320,
		height: 320,
		render: &quot;canvas&quot;, //设置渲染方式 table canvas
		text: utf16to8(&quot;你好，QRcode&quot;),
		background      : &quot;#ffffff&quot;,//背景颜色 
		foreground      : &quot;#000000&quot; //前景颜色 
	});
})
 

// by loveboy
function utf16to8(str) { 
	var out, i, len, c; 
	out = &quot;&quot;; 
	len = str.length; 
	for(i = 0; i &amp;lt; len; i++) { 
	c = str.charCodeAt(i); 
	if ((c &amp;gt;= 0x0001) &amp;amp;&amp;amp; (c &amp;lt;= 0x007F)) { 
		out += str.charAt(i); 
	} else if (c &amp;gt; 0x07FF) { 
		out += String.fromCharCode(0xE0 | ((c &amp;gt;&amp;gt; 12) &amp;amp; 0x0F)); 
		out += String.fromCharCode(0x80 | ((c &amp;gt;&amp;gt;  6) &amp;amp; 0x3F)); 
		out += String.fromCharCode(0x80 | ((c &amp;gt;&amp;gt;  0) &amp;amp; 0x3F)); 
	} else { 
		out += String.fromCharCode(0xC0 | ((c &amp;gt;&amp;gt;  6) &amp;amp; 0x1F)); 
		out += String.fromCharCode(0x80 | ((c &amp;gt;&amp;gt;  0) &amp;amp; 0x3F)); 
	} 
	} 
	return out; 
} 
&amp;lt;/script&amp;gt;
 
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;由于 jquery-qrcode 库是utf8格式，所以不支持中文(utf16编码)，感谢原作者提供的解决方案，可以先将中文的utf16编码转换为utf8编码，再通过 jquery-qrcode 库生成二维码。将上边的测速代码保存为一个html文件，再浏览器中打开就可以看到效果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://i1277.photobucket.com/albums/y499/ashukang/4E8C7EF478016F14793A622A56FE1_zpsf7b061af.png&quot; alt=&quot;测试二维码&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;chrome-&quot;&gt;Chrome 插件的开发流程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Chrome 插件开发需要一个入口文件 manifest.json ,它定义了整个插件的名字、描述、权限，以及所要展示的 html 页面与脚本代码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要注意的是Chrome对html页面的有一定的限制，基本上直接写在html页面内的js代码都是不被执行的，需要写成独立的js代码，在html页面中引入。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;manifest.json 的格式，以及定义都比较简单，我是参照&lt;a href=&quot;http://www.cnblogs.com/bdstjk/p/3180925.html&quot;&gt;这里&lt;/a&gt;来学习demo的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chrome--1&quot;&gt;整合到 Chrome 插件中&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;下载 &lt;a href=&quot;http://jquery.com/download/&quot;&gt;jquery&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将生成二维码的 js 代码抽离到 popup.js&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建 popup.html 文件用于显示二维码&lt;/p&gt;

    &lt;html&gt;
 &lt;head&gt;
 &lt;title&gt;Qrcode Creator&lt;/title&gt;
 &lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;
 &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.qrcode.min.js&quot;&gt;&lt;/script&gt;
 &lt;script type=&quot;text/javascript&quot; src=&quot;popup.js&quot;&gt;&lt;/script&gt;
 &lt;/head&gt;
 &lt;body&gt;
 	&lt;div id=&quot;output&quot;&gt;&lt;/div&gt;
 &lt;/body&gt;
 &lt;/html&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于将生成二维码的代码抽离到了popup.js脚本中，所以需要有一个时机让网页可以调用这个方法。很明显，我们可以选择在popup.html加载完之后让生成二维码的方法被执行。因为popup.html非常简单只是做为二维码图片的显示页面，所以DOMContentLoaded事件比较适合（请参考&lt;a href=&quot;http://www.cnblogs.com/hh54188/archive/2013/03/01/2939426.html&quot;&gt;这里&lt;/a&gt;），当DOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;将监听加到 popup.js 中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;function init() {
	jQuery(function(){
		$('#output').qrcode({
			width:320,
			height:320,
			render:&quot;canvas&quot;,
			text:utf16to8(&quot;网页链接&quot;),
			background:&quot;#ffffff&quot;,
			foreground:&quot;#000000&quot;
		});
		}
	);
}

document.addEventListener('DOMContentLoaded', function() {
  init();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;这里又出现了另外一个问题，如果获取到当前tab的url？&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;其实Chrome已经为什么提供了相关的api，参考&lt;a href=&quot;http://open.chrome.360.cn/html/dev_tabs.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

  &lt;p&gt;可以使用 &lt;code&gt;chrome.tabs.getSelected(integer windowId, function callback)&lt;/code&gt; 这个接口来获取当前页面的url。
因为它的异步的方法，可以稍微修改的因为它的异步的方法，可以稍微修改的 popup.js 的内容，最终popup.js的内容如下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;function utf16to8(str){
	var out, i, len, c;
	out=&quot;&quot;;
	len=str.length;
	for(i=0; i&amp;lt;len; i++){
		c=str.charCodeAt(i);
		if((c&amp;gt;=0x0001)&amp;amp;&amp;amp;(c&amp;lt;=0x007f)){
			out+=str.charAt(i);
		}else if(c&amp;gt;0x07ff){
			out+=String.fromCharCode(0xe0 | ((c&amp;gt;&amp;gt;12)&amp;amp;0x0f));
			out+=String.fromCharCode(0x80 | ((c&amp;gt;&amp;gt;6)&amp;amp;0x3f));
			out+=String.fromCharCode(0x80 | ((c&amp;gt;&amp;gt;0)&amp;amp;0x3f));
		}else{
			out+=String.fromCharCode(0xc0 | ((c&amp;gt;&amp;gt;6)&amp;amp;0x1f));
			out+=String.fromCharCode(0x80 | ((c&amp;gt;&amp;gt;0)&amp;amp;0x3f));
		}
	}
	return out;
}

function getUrlID(tab) {
	//alert(tab.url);
	jQuery(function(){
		$('#output').qrcode({
			width:320,
			height:320,
			render:&quot;canvas&quot;,
			text:utf16to8(tab.url),
			background:&quot;#ffffff&quot;,
			foreground:&quot;#000000&quot;
		});
		}
	);
}

function init() {
	chrome.tabs.getSelected(null,getUrlID);
}

document.addEventListener('DOMContentLoaded', function() {
  init();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;编写 manifest.json ，为插件命名，创建icon，同时去除不必要的权限。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为我们只需要访问到网页的地址，所以权限部分只需要一个 ‘tags’ 就可以了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;{  
  	&quot;name&quot;: &quot;Url QRcode&quot;,
  	&quot;manifest_version&quot;:2,
	&quot;version&quot;: &quot;1.1&quot;,  
	&quot;description&quot;: &quot;将网页链接生成二维码&quot;,  
	&quot;icons&quot;:{&quot;48&quot;:&quot;icon_48.png&quot;,&quot;128&quot;:&quot;icon_128.png&quot;},
	&quot;browser_action&quot;: {  
		&quot;default_icon&quot;: {
               &quot;19&quot;: &quot;icon_19.png&quot;,
               &quot;38&quot;: &quot;icon_38.png&quot;
          },
		&quot;default_title&quot;: &quot;Url Qrcode&quot;,
		&quot;default_popup&quot;: &quot;popup.html&quot;
	 },
  	&quot;permissions&quot;: [&quot;tabs&quot;] 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;在Chrome插件管理页面，以开发者模式加载刚刚编辑完的插件，就可以看到运行效果了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://i1277.photobucket.com/albums/y499/ashukang/load_zps478d7df6.png&quot; alt=&quot;加载插件&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i1277.photobucket.com/albums/y499/ashukang/qrcodewelcome_zpsb6fde567.png&quot; alt=&quot;运行效果&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;发布插件&lt;/h2&gt;

&lt;p&gt;Chrome插件开发完成后，就可以发布到Chrome市场内，流程并不复杂，参考&lt;a href=&quot;http://blog.segmentfault.com/phper/1190000000354014&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;发布到Chrome 网上应用商店需要满足一下3个大点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有一个完整的Chrome App项目&lt;/li&gt;
  &lt;li&gt;有一张信用卡来激活Google Wallet&lt;/li&gt;
  &lt;li&gt;支付5美元用来启用开发者账户&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;最后&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;本文也只是走马观花式地将自己遇到的一个小需求到最后转化为一个简单的 Chrome 插件的过程记录下来。虽然开发 Chrome 插件的流程并不复杂，但是用到的 Chrome 插件特性还是很少，大部分的 Chrome Api 其实并没有涉及到，以后如果有这方面的需求，再好好的研究吧！&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>在Github上搭建自己的blog</title>
   <link href="http://ashukang.github.io/other/2014/05/31/githubblog"/>
   <updated>2014-05-31T00:00:00+08:00</updated>
   <id>http://ashukang.github.io/other/2014/05/31/githubblog</id>
   <content type="html">
&lt;p&gt;一直想着要记下自己的学习过程，但却没有开始动手。其实知道github上边可以做blog也不是一天两天的事情，关键就是有点懒（=。=）。为了更正这一个陋习，将申请ashukang.github.io的过程做个纲要性小结，作为自己的第一篇文章。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装必要的软件，包括 git、ruby、gem、jekyll、rake&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; sudo apt-get install git
 sudo apt-get install ruby
 sudo apt-get install gem
 sudo apt-get install rake
 sudo apt-get install jekyll
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;申请 github 帐号，创建一个 username.github.io 的 repository，必须注意的是用于申请 github 个人主页的 username 必须和 github 帐号是同名的，否则 github 不会自动生成个人主页。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进入 username.github.io 的设置页面，配置 “Automatic Page Generator” ，选择一个主题，然后 “PUBLIS”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将 username.github.io clone 到本地，然后预览。&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; git clone https://github.com/ashukang/ashukang.github.io.git
 cd ashukang.github.io
 jekyll sever --server
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在浏览器中打开 http://localhost:4000&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用 jekyll-bootstrap 框架&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; cd ..
 git clone https://github.com/plusjade/jekyll-bootstrap.git
 cd jekyll-bootstrap
 rm -rf ./.git/
 cp -R * ../ashukang.github.io
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编辑 ashukang.github.io/_config.yml&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;打开自动生成，修改 Markdown 编辑器为官方推荐的版本&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;pre&gt;&lt;code&gt; auto: true
 markdown: kramdown
&lt;/code&gt;&lt;/pre&gt;

    &lt;blockquote&gt;
      &lt;p&gt;修改主页信息&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;pre&gt;&lt;code&gt; title : 一杯清茶，一本书
 tagline: Site Tagline
 author :
   name : ashukang
     email : kangsj9104@gmail.com
       github : ashukang
         #twitter : username
         #feedburner : feedname
&lt;/code&gt;&lt;/pre&gt;

    &lt;blockquote&gt;
      &lt;p&gt;关闭评论（github io不提供动态网站服务，所以评论功能是借助第三方提供，例如 Disques。因为这部分内容还有待学习，所以先把这个功能关闭）&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;pre&gt;&lt;code&gt; # Settings for comments helper
 # Set 'provider' to the comment provider you want to use.
 # Set 'provider' to false to turn commenting off globally.
 #
 comments :
     provider : false
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;删除根目录下的 index.html，删除 _post 文件夹下的 core-sample 目录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编辑 index.md，自定义主页内容&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;---
layout: page
title: 学无止境
tagline: Supporting tagline
---
    
    
## 小抄
    
&amp;lt;ul class=&quot;posts&quot;&amp;gt;
        
        &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;30 Nov 2014&amp;lt;/span&amp;gt; &amp;amp;raquo; &amp;lt;a href=&quot;/smart/2014/11/30/voice-controller-server&quot;&amp;gt;Android声控Cubieboard播放音乐（服务器）&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        
        &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;30 Nov 2014&amp;lt;/span&amp;gt; &amp;amp;raquo; &amp;lt;a href=&quot;/smart/2014/11/30/voice-controller-client&quot;&amp;gt;Android声控CubieBoard播放音乐（客户端）&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        
        &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;15 Nov 2014&amp;lt;/span&amp;gt; &amp;amp;raquo; &amp;lt;a href=&quot;/smart/2014/11/15/arduino&quot;&amp;gt;Arduino+超声波测距做控制器&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        
        &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;25 Jun 2014&amp;lt;/span&amp;gt; &amp;amp;raquo; &amp;lt;a href=&quot;/other/2014/06/25/chrome&quot;&amp;gt;从小需求开始学Chrome插件开发&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        
        &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;31 May 2014&amp;lt;/span&amp;gt; &amp;amp;raquo; &amp;lt;a href=&quot;/other/2014/05/31/githubblog&quot;&amp;gt;在Github上搭建自己的blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        
&amp;lt;/ul&amp;gt;
    
## 待续
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加文章&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;rake post title=&quot;Hello World&quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;blockquote&gt;
      &lt;p&gt;编辑 _post/2014-05-31-helloworld.md，以 Markdown格式编辑博文，例如。&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;pre&gt;&lt;code&gt;---
layout: post
title: &quot;Hello World&quot;
description: &quot;first post&quot;
category: 'test'
tags: ['hello', 'jekyll']
---
    
    
# Hello World
&lt;/code&gt;&lt;/pre&gt;

    &lt;blockquote&gt;
      &lt;p&gt;重新运行 jekyll 就可以看到这篇测试文章了&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将所有变更提交到github上&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;git add -A .
git commit -m &quot;first commit&quot;
git push origin
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 
</feed>